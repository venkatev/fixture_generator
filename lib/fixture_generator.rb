=begin

Provides the functionality for creating active record objects and associating
fixture names to them and then writing them to yml files.

Usage:

  class MyFixtureGenerator < FixtureGenerator
    def populate
      # Create your records here and add them to the fixture set by calling
      # 'add_record(record_name, record_object)'. That's it!
    end
  end

  MyFixtureGenerator.generate

Copyright (c) 2010 Vikram Venkatesan

=end

class FixtureGenerator
  # Map from model class name to the corresponding table name.
  attr_accessor :models

  # Map from each table name to fixtures for that table name.
  #
  #   {
  #    'users' => {:greg => <object>, :mark => <object>},
  #    'cars'  => {:benz => <object>, :ferrari => <object>}
  #   }
  #
  attr_accessor :object_map

  # Mapping from active record object to the fixture name.
  attr_accessor :fixture_name_map

  # Generates fixture data and writes them to yml files.
  #
  def self.generate(opts = {})
    _generator = self.new

    # Register the models.
    (ActiveRecord::Base.send(:subclasses) - (opts[:except] || [])).each do |model_klass|
      _generator.register_model(model_klass)
    end

    ActiveRecord::Base.transaction do
      ActiveRecord::Base.connection.execute "SET AUTOCOMMIT=0;"
      begin
        _generator.populate
      end
      ActiveRecord::Base.connection.execute "SET AUTOCOMMIT=1;"
    end

    _generator.write_to_file
  end

  # Creates the ActiveRecord records to be written to yml files.
  #
  # To be implemented by the project specific generator.
  #
  def populate
    raise NotImplementedError
  end

  # Registers the model with class name +klass+ and corresponding table name
  # +table_name+
  #
  def register_model(klass)
    table_name = klass.table_name
    self.models[klass] = table_name
    self.object_map[table_name] = {}

    self.class_eval do
      # Define accessors for the fixtures for this new model.
      define_method(table_name) do |name|
        self.object_map[table_name][name.to_sym]
      end
    end
  end

  # Writes the generated fixture records to files under 'fixtures' directory.
  #
  # XXX Note that any existing fixtures will be replaced with the new ones by
  # this method.
  #
  def write_to_file
    newline
    say "Writing fixtures to YAML files"
    records_by_table_name = {}

    self.models.each do |model_class, table_name|
      # Load all records of this model.
      records_by_table_name[table_name] ||= []
      records_by_table_name[table_name] += model_class.all
    end

    records_by_table_name.each do |table_name, records|
      yaml_data = ""

      if records.any?
        # Sequence number for records for which we do not have names.
        i = "0"
        data_array = []

        records.uniq.each do |record|
          # Get the name given for this record while populating. If not
          # available (autogenerated through callbacks), use a sequence number
          # prefixed by the table name.
          fixture_name = self.fixture_name_map[record] || "#{table_name}_#{i.succ!}"
          attrs = record.attributes
          attrs['delta'] = false if attrs.key?('delta')
          data_array << {fixture_name => attrs}.to_yaml.gsub(/--- \n/, "")
        end

        yaml_data = data_array.join("\n")

        File.open("#{RAILS_ROOT}/test/fixtures/#{table_name}.yml", "w") do |file|
          file.write yaml_data
        end
      end
      dot
    end
  end

  private

  # Private constructor for providing a static interface to the generator.
  #
  def initialize
    self.models = {}
    self.object_map = {}
    self.fixture_name_map = {}

    # Lower the logging level since we are about to create many records.
    _logger                   = Logger.new(STDOUT)
    _logger.level             = Logger::ERROR
    ActiveRecord::Base.logger = _logger
  end

  # Adds a fixture +record+ with the given +name+.
  #
  def add_record(name, record)
    klass_map = self.object_map[self.models[record.class]]

    # Panic if attempted to insert duplicate fixture record.
    if klass_map.include?(name.to_sym)
      raise "Duplicate fixture for #{record.class} - #{name}"
    end

    self.fixture_name_map[record] = name.to_s
    klass_map[name.to_sym] = record
    dot

    return record
  end

  ##############################################################################
  # PRINTING
  ##############################################################################

  def say(str)
    print "*** FixtureGenerator :: #{str}"
  end

  def say_populating(model_name)
    newline
    say "Populating #{model_name}"
  end

  def warn(msg)
    print_and_flush "!!! WARNING: #{msg}\n"
  end

  def dot
    print_and_flush(".")
  end

  def newline
    print_and_flush("\n")
  end

  def print_and_flush(msg)
    print msg
    $stdout.flush
  end
end
